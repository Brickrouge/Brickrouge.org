<?php

namespace Brickrouge;

use ICanBoogie\Render\Renderer;

/**
 * @var $blocks \App\View\Blocks
 * @var $markdown \App\View\Markdown
 */

?>

<div class="hero-unit">
	<div class="container">
		<h1>Brick<span>rouge</span>.js</h1>

		<div class="row">
			<div class="col-lg-9">
				<p class="lead">Create encapsulated and interoperable custom elements—or widgets—from
				HTML elements without delay, bump, or refresh.</p>

				<p>Brickrouge.js is included and built upon by Brickrouge to provide additional
				features and builtin widgets such as Popovers and Calendars.</p>

				<p><a href="https://github.com/Brickrouge/Brickrouge.js" class="btn btn-secondary" target="_blank">Brickrouge.js on GitHub</a></p>
			</div>
		</div>
	</div>
</div>

<section class="container">

	<h1>A simple demo</h1>

	<p>Widgets are created from existing HTML and CSS, they just come to life by the grace of <a
	href="https://github.com/Brickrouge/Brickrouge.js">Brickrouge.js</a>. Widgets may be embedded by
	other widgets. The following example demonstrates how a <em>copy</em> widget may embed a
	<em>time</em> widget. When the "Copy" button is pressed the <em>copy</em> widget creates a copy
	of its element and insert it before itself, <a
	href="https://github.com/Brickrouge/Brickrouge.js">Brickrouge.js</a> takes care of builing
	widgets when the DOM is mutated, the rest is up to you.</p>

	<p>The special attribute <code>brickrouge-is</code> is used to recognize widgets from classic
	HTML elements, it defines the name of the widget factory.</p>

	<div class="doc-example">

		<?= render_partial('examples/widget-html') ?>

	</div>

	<pre style="max-height: 32em"><code class="lang-html">
<?= str_replace("\t", '    ', escape(render_partial('examples/widget-html'))) ?>

<?= str_replace("\t", '    ', escape(render_partial('examples/widget-js'))) ?>
</code></pre>

</section>

<section class="container"><?php $markdown->begin() ?>

# Running Brickrouge

`Brickrouge.run()` is used to run **Brickrouge**. The DOM is observed for mutations and widgets
found in `document.body` are built.

It is advised to use the method as a _DOM ready_ callback:

```js
document.addEventListener('DOMContentLoaded', Brickrouge.run)
```

> The [MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver)
interface—or DOM polling if it's not available—is used to automatically build new widgets.

<?= $markdown->end() ?></section>

<section class="container"><?php $markdown->begin() ?>

# Events

## A widget has been built

The `widget` event is fired after a widget has been built.

```js
Brickrouge.observe('widget', function(widget) {

    console.log('A widget has been built:', widget)

})
```

## The DOM was updated

The `update` event is fired after the DOM was updated.

```
Brickrouge.observe('update', function(fragment, elements, widgets) {

    console.log('This fragment updated the DOM:', fragment)
    console.log('These elements are new widgets:', elements)
    console.log('These widgets have been built:', widgets)

})
```

> **Note:** The event is fired a first time after **Brickrouge.js** is ran.

# Brickrouge is running

The `running` event is fired after **Brickrouge** is ran.

```js
Brickrouge.observe('running', function() {

    console.log('Brickrouge is running, we can do stuff')

})
```

<?= $markdown->end() ?></section>

<section class="container"><?php $markdown->begin() ?>

# Helpers

- `Brickrouge.isWidget()`: Whether the element is a widget.

- `Brickrouge.isBuilt()`: Whether the widget for this element is built.

- `Brickrouge.uidOf()`: Returns the unique identifier associated with an element. If the
`uniqueNumber` property is available it will return it, otherwise it creates a unique identifier of
its own.

- `Brickrouge.clone()`: Clone a custom element, taking care of removing sensitive attributes.

- `Brickrouge.Dataset.from()`: Returns the dataset values associated with an element.

- `Brickrouge.Widget.from()` or `Brickrouge.from()`: Returns the widget associated with an element
and creates it if needed.

<?= $markdown->end() ?></section>

<?php $blocks->begin() ?>
<?= \ICanBoogie\Render\render([ Renderer::OPTION_PARTIAL => 'examples/widget-js' ]) ?>
<?php $blocks->end('scripts') ?>
