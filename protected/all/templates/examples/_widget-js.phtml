<script type="text/javascript">

	!function(Brickrouge)
	{
		var n = 1

		function Time(element, options)
		{
			element.style.backgroundColor = rainbow(32, ++n % 32)

			function update()
			{
				element.innerHTML = (new Date).toISOString()
			}

			update()

			setInterval(update, 1000)
		}

		function Copy(element, options)
		{
			element
			.querySelector('button')
			.addEventListener('click', function() {

				var copy = Brickrouge.clone(element)
				, parent = element.parentNode

				parent.appendChild(copy)
				parent.insertBefore(copy, element)

			})
		}

		Brickrouge.register('time', function(element, options) {

			return new Time(element, options)

		})

		Brickrouge.register('copy', function(element, options) {

			return new Copy(element, options)

		})

	} (Brickrouge);

	function rainbow(numOfSteps, step)
	{
		// This function generates vibrant, "evenly spaced" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.
		// Adam Cole, 2011-Sept-14
		// HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript
		var r, g, b;
		var h = step / numOfSteps;
		var i = ~~(h * 6);
		var f = h * 6 - i;
		var q = 1 - f;
		switch(i % 6)
		{
			case 0: r = 1; g = f; b = 0; break;
			case 1: r = q; g = 1; b = 0; break;
			case 2: r = 0; g = 1; b = f; break;
			case 3: r = 0; g = q; b = 1; break;
			case 4: r = f; g = 0; b = 1; break;
			case 5: r = 1; g = 0; b = q; break;
		}
		return "#" + ("00" + (~ ~(r * 255)).toString(16)).slice(-2) + ("00" + (~ ~(g * 255)).toString(16)).slice(-2) + ("00" + (~ ~(b * 255)).toString(16)).slice(-2);
	}

</script>
